import { Card, CardBody, Heading, Stack, Text, Image, CardFooter, Button, Box, IconButton, Icon, Spinner, Center } from "@chakra-ui/react";
import Head from "next/head";
import { NavBar } from "~/components/NavBar";
import { BsRobot } from 'react-icons/bs';
import { Tooltip } from '@chakra-ui/react'
import { api, RouterOutputs } from "~/utils/api";
import { useEffect, useState } from "react";
import { useInView } from "react-intersection-observer";
import Link from "next/link";

type imgListType = Record<string, string>

const imgList:imgListType = {
  "香港01":"https://upload.wikimedia.org/wikipedia/zh/6/63/HK01logo.jpg",
  "香港電台":"https://pbs.twimg.com/profile_images/1600452137091141633/MwjYi1ju_400x400.jpg",
  "頭條日報":"https://static.stheadline.com/stheadline/images/hd_logo.jpg",
  "RFI - 法國國際廣播電台":"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/RFI_logo_2013.svg/150px-RFI_logo_2013.svg.png",
  "雅虎香港新聞":"https://s.yimg.com/cv/apiv2/social/images/yahoo_default_logo-1200x1200.png"
}
Object.freeze(imgList)

export default function Home() {
  const { ref, inView } = useInView();
  const [loadingSummary, setloadingSummary] = useState(false);
  const [sumID, setsumID] = useState(``);
  const [sumtext, setsumtext] = useState(``);
  const [article, setarticle] = useState(``);
  const [topic, setTopic] = useState("");
  

  const handleButtonClick = (ev: React.MouseEvent<HTMLButtonElement>) => {
    const btn = ev.currentTarget

    setsumID(btn.getAttribute('name') ?? "")
    const idx1 = Number(btn.getAttribute('data-idx1')) ?? 0
    const idx2 = Number(btn.getAttribute('data-idx2')) ?? 0
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access
    setarticle((data?.pages?.[idx1]?.newsList[idx2]?.article ?? data?.pages?.[idx1]?.newsList[idx2]?.description) ?? "")

    // setloadingSummary(true)
    // const ret = await summaryQuery.refetch({ stale:true})
    // // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access
    // setsumtext(ret?.data?.details.text ?? "")
    // setloadingSummary(false)
  }

  const summaryQuery = api.news.getSummary.useQuery({ article: article }, {
    enabled: false,
    // refetchOnMount:true
  })

  const { data, fetchNextPage, isFetchingNextPage, isLoading } = api.news.getAll.useInfiniteQuery(
    { topic },
    {
      getNextPageParam: (lastPage: RouterOutputs['news']['getAll']) => lastPage.nextCursor,
    },
  )

  useEffect(() => {
    if (inView) {
      fetchNextPage().then((d) => {
        const news = d.data?.pages[d.data?.pages.length - 1]?.newsList ?? []
      }).catch(err => console.log(err))
    }
  }, [fetchNextPage, inView, topic]);

  useEffect(() => {
    const fetch = async () => {
      if (article) {
        setloadingSummary(true)
        const ret = await summaryQuery.refetch({ stale: true })
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access
        setsumtext(ret?.data?.details.text ?? "")
        setloadingSummary(false)
      }
    }
    fetch().catch(err => console.error(err))
  }, [article]);

  return (
    <>
      <Head>
        <title>HK News</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center pt-[70px] bg-slate-200">
        <NavBar setTopic={setTopic} />
        <Box p={2}>
          {
            !isLoading ?
              data?.pages.map((newsPage, idx1) => (
                <>
                  {
                    newsPage.newsList.map((singleNews, idx2) =>
                    (<Card
                      direction={"row"}
                      // direction={{ base: 'row', sm: 'column' }}
                      overflow='hidden'
                      variant='outline'
                      shadow={"md"}
                      dropShadow={"dark-lg"}
                      m={2}
                      p={4}
                      key={singleNews.id}
                    >
                      <Box>
                        <Image
                          // objectFit='cover'
                          maxW={{ base: '100%', sm: '150px' }}
                          // maxH={"200px"}
                          // margin={"auto"}
                          src={imgList[singleNews.publisher.title]??"https://t3.ftcdn.net/jpg/00/88/43/58/360_F_88435847_HhglbcoGP5qOX3DfudP3hN5z95eTrHqz.jpg"}
                          alt='news Image'
                        />
                      </Box>
                      <Stack flexGrow={1}>
                        <CardBody>

                          <Box>
                            <Heading size='md'>
                              <Link
                                target='_blank'
                                className="cursor-pointer hover:underline"
                                href={`${singleNews.url}`}>{singleNews.title}
                              </Link>
                            </Heading>

                            <Text py='2'>
                              {singleNews.published_date.toString()}
                            </Text> 
                          </Box>
                        </CardBody>

                        <CardFooter justifyContent={"flex-end"} flexDirection={"column"} gap={2}>
                          <Box alignSelf={"end"}>
                            {loadingSummary && sumID === singleNews.id
                              ? <Spinner />
                              : <Tooltip label='AI Summary (Bing)' fontSize='md'>
                                <IconButton
                                  // eslint-disable-next-line @typescript-eslint/no-misused-promises
                                  onClick={handleButtonClick}
                                  variant='outline'
                                  colorScheme='blue'
                                  aria-label='AI Summary'
                                  icon={<Icon as={BsRobot} />}
                                  name={singleNews.id}
                                  data-idx1={idx1}
                                  data-idx2={idx2}
                                />
                              </Tooltip>}
                          </Box>
                          {
                            sumID === singleNews.id && !loadingSummary &&
                            <Box whiteSpace={"pre-line"}>
                              {sumtext}
                            </Box>
                          }
                        </CardFooter>
                      </Stack>
                    </Card>))
                  }
                </>
              ))
              : <Spinner />
          }
          <Center ref={ref}>{isFetchingNextPage && <Spinner />}</Center>
        </Box>
      </main>
    </>
  );
}
